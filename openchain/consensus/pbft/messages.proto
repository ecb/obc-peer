/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package pbft;

/*
 * mapping to PBFT paper names
 *
 * PBFT name: local name
 *
 * o: transaction
 * t: timestamp
 * c: client
 * v: view
 * n: sequenceNumber
 * D(m): requestDigest
 * i: replicaId
 */

message Message {
    oneof payload {
        Request request = 1;
        PrePrepare prePrepare = 2;
        Prepare prepare = 3;
        Commit commit = 4;
        Checkpoint checkpoint = 5;
        ViewChange viewChange = 6;
        NewView newView = 7;
    }
}

message Request {
    google.protobuf.Timestamp timestamp = 1;  // Generated at the client level. Ensures that client's requests are atomically ordered.
    bytes payload = 2;  // Opaque payload
}

message PrePrepare {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    Request request = 4;
    uint64 replica_id = 5;
}

message Prepare {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    uint64 replica_id = 4;
}

message Commit {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    uint64 replica_id = 4;
}

message Checkpoint {
    uint64 sequence_number = 1;
    string state_digest = 2;
    uint64 replica_id = 3;
}

message ViewChange {
    message C {
        uint64 sequence_number = 1;
        string digest = 2;
    }
    message PQ {
        uint64 sequence_number = 1;
        string digest = 2;
        uint64 view = 3;
    }

    uint64 view = 1;
    uint64 h = 2;
    repeated C cset = 3;
    repeated PQ pset = 4;
    repeated PQ qset = 5;
    uint64 replica_id = 6;
}

message NewView {
    uint64 view = 1;
    repeated ViewChange Vset = 2;
    map<uint64, string> Xset = 3;
    uint64 replica_id = 4;
}
